k0 = 0.2  # production
k1 = 0.01  # degradation
stoichiometry = [1, -1]

def propensities(x):
    return [k0, k1 * x]

def reaction_times(x):
    a = propensities(x)
    a_inv = [1 / s if s > 0 else np.inf for s in a]
    return -np.log(np.random.rand(2)) * a_inv

def ssa_step(x, t_in, t_out):
    t = t_in
    
    while t < t_out:
        rt = reaction_times(x)
        idx = np.argmin(rt)
        tau = np.min(rt)
    
        x += stoichiometry[idx]
        t += tau
    
    return x

# Simulate 5 independent trajectories
num_simulations = 5
dt = 0.1 #time step 
total_time = 1000  # total simulation time
num_steps = int(total_time / dt)


simulations = []

for _ in range(num_simulations):
    x = 0 #initial state
    t = 0.0
    
    mrna = [x]
    time = [t]
    
    for _ in range(num_steps):
        x = ssa_step(x, t, t + dt)
        t += dt
        mrna.append(x)
        time.append(t)
    
    simulations.append((time, mrna))

# Calculate the average of simulations
average_mrna = np.mean([mrna for _, mrna in simulations], axis=0)

# Plot the results
plt.figure(figsize=(10, 6))
for i, (time, mrna) in enumerate(simulations):
    plt.plot(time, mrna, label=f'Simulation {i+1}')

plt.plot(time, average_mrna, label='Mean', linestyle='-', color='black', linewidth=2)

plt.title('Stochastic Simulation of mRNA Birth-Death Process (5 Independent Simulations)', fontsize =15)
plt.xlabel('Time (s)', fontsize = 15)
plt.ylabel('Number of mRNAs', fontsize = 15)
plt.legend(loc='lower right')
plt.show() 
